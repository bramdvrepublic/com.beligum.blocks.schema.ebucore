/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.beligum.blocks.schema.ebucore.v2015.avro;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class coefficientType extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"coefficientType\",\"namespace\":\"com.beligum.blocks.schema.ebucore.v2015.avro\",\"fields\":[{\"name\":\"gain\",\"type\":[\"null\",\"float\"],\"source\":\"attribute gain\"},{\"name\":\"gainVar\",\"type\":[\"null\",\"string\"],\"source\":\"attribute gainVar\"},{\"name\":\"phase\",\"type\":[\"null\",\"float\"],\"source\":\"attribute phase\"},{\"name\":\"phaseVar\",\"type\":[\"null\",\"string\"],\"source\":\"attribute phaseVar\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.Float gain;
  @Deprecated public java.lang.CharSequence gainVar;
  @Deprecated public java.lang.Float phase;
  @Deprecated public java.lang.CharSequence phaseVar;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public coefficientType() {}

  /**
   * All-args constructor.
   */
  public coefficientType(java.lang.Float gain, java.lang.CharSequence gainVar, java.lang.Float phase, java.lang.CharSequence phaseVar) {
    this.gain = gain;
    this.gainVar = gainVar;
    this.phase = phase;
    this.phaseVar = phaseVar;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return gain;
    case 1: return gainVar;
    case 2: return phase;
    case 3: return phaseVar;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: gain = (java.lang.Float)value$; break;
    case 1: gainVar = (java.lang.CharSequence)value$; break;
    case 2: phase = (java.lang.Float)value$; break;
    case 3: phaseVar = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'gain' field.
   */
  public java.lang.Float getGain() {
    return gain;
  }

  /**
   * Sets the value of the 'gain' field.
   * @param value the value to set.
   */
  public void setGain(java.lang.Float value) {
    this.gain = value;
  }

  /**
   * Gets the value of the 'gainVar' field.
   */
  public java.lang.CharSequence getGainVar() {
    return gainVar;
  }

  /**
   * Sets the value of the 'gainVar' field.
   * @param value the value to set.
   */
  public void setGainVar(java.lang.CharSequence value) {
    this.gainVar = value;
  }

  /**
   * Gets the value of the 'phase' field.
   */
  public java.lang.Float getPhase() {
    return phase;
  }

  /**
   * Sets the value of the 'phase' field.
   * @param value the value to set.
   */
  public void setPhase(java.lang.Float value) {
    this.phase = value;
  }

  /**
   * Gets the value of the 'phaseVar' field.
   */
  public java.lang.CharSequence getPhaseVar() {
    return phaseVar;
  }

  /**
   * Sets the value of the 'phaseVar' field.
   * @param value the value to set.
   */
  public void setPhaseVar(java.lang.CharSequence value) {
    this.phaseVar = value;
  }

  /** Creates a new coefficientType RecordBuilder */
  public static com.beligum.blocks.schema.ebucore.v2015.avro.coefficientType.Builder newBuilder() {
    return new com.beligum.blocks.schema.ebucore.v2015.avro.coefficientType.Builder();
  }
  
  /** Creates a new coefficientType RecordBuilder by copying an existing Builder */
  public static com.beligum.blocks.schema.ebucore.v2015.avro.coefficientType.Builder newBuilder(com.beligum.blocks.schema.ebucore.v2015.avro.coefficientType.Builder other) {
    return new com.beligum.blocks.schema.ebucore.v2015.avro.coefficientType.Builder(other);
  }
  
  /** Creates a new coefficientType RecordBuilder by copying an existing coefficientType instance */
  public static com.beligum.blocks.schema.ebucore.v2015.avro.coefficientType.Builder newBuilder(com.beligum.blocks.schema.ebucore.v2015.avro.coefficientType other) {
    return new com.beligum.blocks.schema.ebucore.v2015.avro.coefficientType.Builder(other);
  }
  
  /**
   * RecordBuilder for coefficientType instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<coefficientType>
    implements org.apache.avro.data.RecordBuilder<coefficientType> {

    private java.lang.Float gain;
    private java.lang.CharSequence gainVar;
    private java.lang.Float phase;
    private java.lang.CharSequence phaseVar;

    /** Creates a new Builder */
    private Builder() {
      super(com.beligum.blocks.schema.ebucore.v2015.avro.coefficientType.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.beligum.blocks.schema.ebucore.v2015.avro.coefficientType.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.gain)) {
        this.gain = data().deepCopy(fields()[0].schema(), other.gain);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.gainVar)) {
        this.gainVar = data().deepCopy(fields()[1].schema(), other.gainVar);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.phase)) {
        this.phase = data().deepCopy(fields()[2].schema(), other.phase);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.phaseVar)) {
        this.phaseVar = data().deepCopy(fields()[3].schema(), other.phaseVar);
        fieldSetFlags()[3] = true;
      }
    }
    
    /** Creates a Builder by copying an existing coefficientType instance */
    private Builder(com.beligum.blocks.schema.ebucore.v2015.avro.coefficientType other) {
            super(com.beligum.blocks.schema.ebucore.v2015.avro.coefficientType.SCHEMA$);
      if (isValidValue(fields()[0], other.gain)) {
        this.gain = data().deepCopy(fields()[0].schema(), other.gain);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.gainVar)) {
        this.gainVar = data().deepCopy(fields()[1].schema(), other.gainVar);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.phase)) {
        this.phase = data().deepCopy(fields()[2].schema(), other.phase);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.phaseVar)) {
        this.phaseVar = data().deepCopy(fields()[3].schema(), other.phaseVar);
        fieldSetFlags()[3] = true;
      }
    }

    /** Gets the value of the 'gain' field */
    public java.lang.Float getGain() {
      return gain;
    }
    
    /** Sets the value of the 'gain' field */
    public com.beligum.blocks.schema.ebucore.v2015.avro.coefficientType.Builder setGain(java.lang.Float value) {
      validate(fields()[0], value);
      this.gain = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'gain' field has been set */
    public boolean hasGain() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'gain' field */
    public com.beligum.blocks.schema.ebucore.v2015.avro.coefficientType.Builder clearGain() {
      gain = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'gainVar' field */
    public java.lang.CharSequence getGainVar() {
      return gainVar;
    }
    
    /** Sets the value of the 'gainVar' field */
    public com.beligum.blocks.schema.ebucore.v2015.avro.coefficientType.Builder setGainVar(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.gainVar = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'gainVar' field has been set */
    public boolean hasGainVar() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'gainVar' field */
    public com.beligum.blocks.schema.ebucore.v2015.avro.coefficientType.Builder clearGainVar() {
      gainVar = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'phase' field */
    public java.lang.Float getPhase() {
      return phase;
    }
    
    /** Sets the value of the 'phase' field */
    public com.beligum.blocks.schema.ebucore.v2015.avro.coefficientType.Builder setPhase(java.lang.Float value) {
      validate(fields()[2], value);
      this.phase = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'phase' field has been set */
    public boolean hasPhase() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'phase' field */
    public com.beligum.blocks.schema.ebucore.v2015.avro.coefficientType.Builder clearPhase() {
      phase = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'phaseVar' field */
    public java.lang.CharSequence getPhaseVar() {
      return phaseVar;
    }
    
    /** Sets the value of the 'phaseVar' field */
    public com.beligum.blocks.schema.ebucore.v2015.avro.coefficientType.Builder setPhaseVar(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.phaseVar = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'phaseVar' field has been set */
    public boolean hasPhaseVar() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'phaseVar' field */
    public com.beligum.blocks.schema.ebucore.v2015.avro.coefficientType.Builder clearPhaseVar() {
      phaseVar = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public coefficientType build() {
      try {
        coefficientType record = new coefficientType();
        record.gain = fieldSetFlags()[0] ? this.gain : (java.lang.Float) defaultValue(fields()[0]);
        record.gainVar = fieldSetFlags()[1] ? this.gainVar : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.phase = fieldSetFlags()[2] ? this.phase : (java.lang.Float) defaultValue(fields()[2]);
        record.phaseVar = fieldSetFlags()[3] ? this.phaseVar : (java.lang.CharSequence) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
