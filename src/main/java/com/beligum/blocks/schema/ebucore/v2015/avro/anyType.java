/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class anyType extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"anyType\",\"fields\":[{\"name\":\"others\",\"type\":{\"type\":\"map\",\"values\":\"string\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> others;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public anyType() {}

  /**
   * All-args constructor.
   */
  public anyType(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> others) {
    this.others = others;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return others;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: others = (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'others' field.
   */
  public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> getOthers() {
    return others;
  }

  /**
   * Sets the value of the 'others' field.
   * @param value the value to set.
   */
  public void setOthers(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
    this.others = value;
  }

  /** Creates a new anyType RecordBuilder */
  public static anyType.Builder newBuilder() {
    return new anyType.Builder();
  }
  
  /** Creates a new anyType RecordBuilder by copying an existing Builder */
  public static anyType.Builder newBuilder(anyType.Builder other) {
    return new anyType.Builder(other);
  }
  
  /** Creates a new anyType RecordBuilder by copying an existing anyType instance */
  public static anyType.Builder newBuilder(anyType other) {
    return new anyType.Builder(other);
  }
  
  /**
   * RecordBuilder for anyType instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<anyType>
    implements org.apache.avro.data.RecordBuilder<anyType> {

    private java.util.Map<java.lang.CharSequence,java.lang.CharSequence> others;

    /** Creates a new Builder */
    private Builder() {
      super(anyType.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(anyType.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.others)) {
        this.others = data().deepCopy(fields()[0].schema(), other.others);
        fieldSetFlags()[0] = true;
      }
    }
    
    /** Creates a Builder by copying an existing anyType instance */
    private Builder(anyType other) {
            super(anyType.SCHEMA$);
      if (isValidValue(fields()[0], other.others)) {
        this.others = data().deepCopy(fields()[0].schema(), other.others);
        fieldSetFlags()[0] = true;
      }
    }

    /** Gets the value of the 'others' field */
    public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> getOthers() {
      return others;
    }
    
    /** Sets the value of the 'others' field */
    public anyType.Builder setOthers(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
      validate(fields()[0], value);
      this.others = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'others' field has been set */
    public boolean hasOthers() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'others' field */
    public anyType.Builder clearOthers() {
      others = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    @Override
    public anyType build() {
      try {
        anyType record = new anyType();
        record.others = fieldSetFlags()[0] ? this.others : (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>) defaultValue(fields()[0]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
