/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class ancillaryDataFormatType extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ancillaryDataFormatType\",\"fields\":[{\"name\":\"ancillaryDataFormatId\",\"type\":[\"null\",\"string\"],\"source\":\"attribute ancillaryDataFormatId\"},{\"name\":\"ancillaryDataFormatName\",\"type\":[\"null\",\"string\"],\"source\":\"attribute ancillaryDataFormatName\"},{\"name\":\"ancillaryDataFormatProfile\",\"type\":[\"null\",\"string\"],\"source\":\"attribute ancillaryDataFormatProfile\"},{\"name\":\"DID\",\"type\":[\"null\",\"string\"],\"source\":\"element DID\"},{\"name\":\"SDID\",\"type\":[\"null\",\"string\"],\"source\":\"element SDID\"},{\"name\":\"lineNumber\",\"type\":{\"type\":\"array\",\"items\":\"string\"},\"source\":\"element lineNumber\"},{\"name\":\"wrappingType\",\"type\":[\"null\",\"string\"],\"source\":\"element wrappingType\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence ancillaryDataFormatId;
  @Deprecated public java.lang.CharSequence ancillaryDataFormatName;
  @Deprecated public java.lang.CharSequence ancillaryDataFormatProfile;
  @Deprecated public java.lang.CharSequence DID;
  @Deprecated public java.lang.CharSequence SDID;
  @Deprecated public java.util.List<java.lang.CharSequence> lineNumber;
  @Deprecated public java.lang.CharSequence wrappingType;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public ancillaryDataFormatType() {}

  /**
   * All-args constructor.
   */
  public ancillaryDataFormatType(java.lang.CharSequence ancillaryDataFormatId, java.lang.CharSequence ancillaryDataFormatName, java.lang.CharSequence ancillaryDataFormatProfile, java.lang.CharSequence DID, java.lang.CharSequence SDID, java.util.List<java.lang.CharSequence> lineNumber, java.lang.CharSequence wrappingType) {
    this.ancillaryDataFormatId = ancillaryDataFormatId;
    this.ancillaryDataFormatName = ancillaryDataFormatName;
    this.ancillaryDataFormatProfile = ancillaryDataFormatProfile;
    this.DID = DID;
    this.SDID = SDID;
    this.lineNumber = lineNumber;
    this.wrappingType = wrappingType;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return ancillaryDataFormatId;
    case 1: return ancillaryDataFormatName;
    case 2: return ancillaryDataFormatProfile;
    case 3: return DID;
    case 4: return SDID;
    case 5: return lineNumber;
    case 6: return wrappingType;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: ancillaryDataFormatId = (java.lang.CharSequence)value$; break;
    case 1: ancillaryDataFormatName = (java.lang.CharSequence)value$; break;
    case 2: ancillaryDataFormatProfile = (java.lang.CharSequence)value$; break;
    case 3: DID = (java.lang.CharSequence)value$; break;
    case 4: SDID = (java.lang.CharSequence)value$; break;
    case 5: lineNumber = (java.util.List<java.lang.CharSequence>)value$; break;
    case 6: wrappingType = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'ancillaryDataFormatId' field.
   */
  public java.lang.CharSequence getAncillaryDataFormatId() {
    return ancillaryDataFormatId;
  }

  /**
   * Sets the value of the 'ancillaryDataFormatId' field.
   * @param value the value to set.
   */
  public void setAncillaryDataFormatId(java.lang.CharSequence value) {
    this.ancillaryDataFormatId = value;
  }

  /**
   * Gets the value of the 'ancillaryDataFormatName' field.
   */
  public java.lang.CharSequence getAncillaryDataFormatName() {
    return ancillaryDataFormatName;
  }

  /**
   * Sets the value of the 'ancillaryDataFormatName' field.
   * @param value the value to set.
   */
  public void setAncillaryDataFormatName(java.lang.CharSequence value) {
    this.ancillaryDataFormatName = value;
  }

  /**
   * Gets the value of the 'ancillaryDataFormatProfile' field.
   */
  public java.lang.CharSequence getAncillaryDataFormatProfile() {
    return ancillaryDataFormatProfile;
  }

  /**
   * Sets the value of the 'ancillaryDataFormatProfile' field.
   * @param value the value to set.
   */
  public void setAncillaryDataFormatProfile(java.lang.CharSequence value) {
    this.ancillaryDataFormatProfile = value;
  }

  /**
   * Gets the value of the 'DID' field.
   */
  public java.lang.CharSequence getDID() {
    return DID;
  }

  /**
   * Sets the value of the 'DID' field.
   * @param value the value to set.
   */
  public void setDID(java.lang.CharSequence value) {
    this.DID = value;
  }

  /**
   * Gets the value of the 'SDID' field.
   */
  public java.lang.CharSequence getSDID() {
    return SDID;
  }

  /**
   * Sets the value of the 'SDID' field.
   * @param value the value to set.
   */
  public void setSDID(java.lang.CharSequence value) {
    this.SDID = value;
  }

  /**
   * Gets the value of the 'lineNumber' field.
   */
  public java.util.List<java.lang.CharSequence> getLineNumber() {
    return lineNumber;
  }

  /**
   * Sets the value of the 'lineNumber' field.
   * @param value the value to set.
   */
  public void setLineNumber(java.util.List<java.lang.CharSequence> value) {
    this.lineNumber = value;
  }

  /**
   * Gets the value of the 'wrappingType' field.
   */
  public java.lang.CharSequence getWrappingType() {
    return wrappingType;
  }

  /**
   * Sets the value of the 'wrappingType' field.
   * @param value the value to set.
   */
  public void setWrappingType(java.lang.CharSequence value) {
    this.wrappingType = value;
  }

  /** Creates a new ancillaryDataFormatType RecordBuilder */
  public static ancillaryDataFormatType.Builder newBuilder() {
    return new ancillaryDataFormatType.Builder();
  }
  
  /** Creates a new ancillaryDataFormatType RecordBuilder by copying an existing Builder */
  public static ancillaryDataFormatType.Builder newBuilder(ancillaryDataFormatType.Builder other) {
    return new ancillaryDataFormatType.Builder(other);
  }
  
  /** Creates a new ancillaryDataFormatType RecordBuilder by copying an existing ancillaryDataFormatType instance */
  public static ancillaryDataFormatType.Builder newBuilder(ancillaryDataFormatType other) {
    return new ancillaryDataFormatType.Builder(other);
  }
  
  /**
   * RecordBuilder for ancillaryDataFormatType instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ancillaryDataFormatType>
    implements org.apache.avro.data.RecordBuilder<ancillaryDataFormatType> {

    private java.lang.CharSequence ancillaryDataFormatId;
    private java.lang.CharSequence ancillaryDataFormatName;
    private java.lang.CharSequence ancillaryDataFormatProfile;
    private java.lang.CharSequence DID;
    private java.lang.CharSequence SDID;
    private java.util.List<java.lang.CharSequence> lineNumber;
    private java.lang.CharSequence wrappingType;

    /** Creates a new Builder */
    private Builder() {
      super(ancillaryDataFormatType.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(ancillaryDataFormatType.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.ancillaryDataFormatId)) {
        this.ancillaryDataFormatId = data().deepCopy(fields()[0].schema(), other.ancillaryDataFormatId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.ancillaryDataFormatName)) {
        this.ancillaryDataFormatName = data().deepCopy(fields()[1].schema(), other.ancillaryDataFormatName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.ancillaryDataFormatProfile)) {
        this.ancillaryDataFormatProfile = data().deepCopy(fields()[2].schema(), other.ancillaryDataFormatProfile);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.DID)) {
        this.DID = data().deepCopy(fields()[3].schema(), other.DID);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.SDID)) {
        this.SDID = data().deepCopy(fields()[4].schema(), other.SDID);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.lineNumber)) {
        this.lineNumber = data().deepCopy(fields()[5].schema(), other.lineNumber);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.wrappingType)) {
        this.wrappingType = data().deepCopy(fields()[6].schema(), other.wrappingType);
        fieldSetFlags()[6] = true;
      }
    }
    
    /** Creates a Builder by copying an existing ancillaryDataFormatType instance */
    private Builder(ancillaryDataFormatType other) {
            super(ancillaryDataFormatType.SCHEMA$);
      if (isValidValue(fields()[0], other.ancillaryDataFormatId)) {
        this.ancillaryDataFormatId = data().deepCopy(fields()[0].schema(), other.ancillaryDataFormatId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.ancillaryDataFormatName)) {
        this.ancillaryDataFormatName = data().deepCopy(fields()[1].schema(), other.ancillaryDataFormatName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.ancillaryDataFormatProfile)) {
        this.ancillaryDataFormatProfile = data().deepCopy(fields()[2].schema(), other.ancillaryDataFormatProfile);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.DID)) {
        this.DID = data().deepCopy(fields()[3].schema(), other.DID);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.SDID)) {
        this.SDID = data().deepCopy(fields()[4].schema(), other.SDID);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.lineNumber)) {
        this.lineNumber = data().deepCopy(fields()[5].schema(), other.lineNumber);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.wrappingType)) {
        this.wrappingType = data().deepCopy(fields()[6].schema(), other.wrappingType);
        fieldSetFlags()[6] = true;
      }
    }

    /** Gets the value of the 'ancillaryDataFormatId' field */
    public java.lang.CharSequence getAncillaryDataFormatId() {
      return ancillaryDataFormatId;
    }
    
    /** Sets the value of the 'ancillaryDataFormatId' field */
    public ancillaryDataFormatType.Builder setAncillaryDataFormatId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.ancillaryDataFormatId = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'ancillaryDataFormatId' field has been set */
    public boolean hasAncillaryDataFormatId() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'ancillaryDataFormatId' field */
    public ancillaryDataFormatType.Builder clearAncillaryDataFormatId() {
      ancillaryDataFormatId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'ancillaryDataFormatName' field */
    public java.lang.CharSequence getAncillaryDataFormatName() {
      return ancillaryDataFormatName;
    }
    
    /** Sets the value of the 'ancillaryDataFormatName' field */
    public ancillaryDataFormatType.Builder setAncillaryDataFormatName(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.ancillaryDataFormatName = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'ancillaryDataFormatName' field has been set */
    public boolean hasAncillaryDataFormatName() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'ancillaryDataFormatName' field */
    public ancillaryDataFormatType.Builder clearAncillaryDataFormatName() {
      ancillaryDataFormatName = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'ancillaryDataFormatProfile' field */
    public java.lang.CharSequence getAncillaryDataFormatProfile() {
      return ancillaryDataFormatProfile;
    }
    
    /** Sets the value of the 'ancillaryDataFormatProfile' field */
    public ancillaryDataFormatType.Builder setAncillaryDataFormatProfile(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.ancillaryDataFormatProfile = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'ancillaryDataFormatProfile' field has been set */
    public boolean hasAncillaryDataFormatProfile() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'ancillaryDataFormatProfile' field */
    public ancillaryDataFormatType.Builder clearAncillaryDataFormatProfile() {
      ancillaryDataFormatProfile = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'DID' field */
    public java.lang.CharSequence getDID() {
      return DID;
    }
    
    /** Sets the value of the 'DID' field */
    public ancillaryDataFormatType.Builder setDID(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.DID = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'DID' field has been set */
    public boolean hasDID() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'DID' field */
    public ancillaryDataFormatType.Builder clearDID() {
      DID = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'SDID' field */
    public java.lang.CharSequence getSDID() {
      return SDID;
    }
    
    /** Sets the value of the 'SDID' field */
    public ancillaryDataFormatType.Builder setSDID(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.SDID = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'SDID' field has been set */
    public boolean hasSDID() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'SDID' field */
    public ancillaryDataFormatType.Builder clearSDID() {
      SDID = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'lineNumber' field */
    public java.util.List<java.lang.CharSequence> getLineNumber() {
      return lineNumber;
    }
    
    /** Sets the value of the 'lineNumber' field */
    public ancillaryDataFormatType.Builder setLineNumber(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[5], value);
      this.lineNumber = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'lineNumber' field has been set */
    public boolean hasLineNumber() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'lineNumber' field */
    public ancillaryDataFormatType.Builder clearLineNumber() {
      lineNumber = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /** Gets the value of the 'wrappingType' field */
    public java.lang.CharSequence getWrappingType() {
      return wrappingType;
    }
    
    /** Sets the value of the 'wrappingType' field */
    public ancillaryDataFormatType.Builder setWrappingType(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.wrappingType = value;
      fieldSetFlags()[6] = true;
      return this; 
    }
    
    /** Checks whether the 'wrappingType' field has been set */
    public boolean hasWrappingType() {
      return fieldSetFlags()[6];
    }
    
    /** Clears the value of the 'wrappingType' field */
    public ancillaryDataFormatType.Builder clearWrappingType() {
      wrappingType = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    public ancillaryDataFormatType build() {
      try {
        ancillaryDataFormatType record = new ancillaryDataFormatType();
        record.ancillaryDataFormatId = fieldSetFlags()[0] ? this.ancillaryDataFormatId : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.ancillaryDataFormatName = fieldSetFlags()[1] ? this.ancillaryDataFormatName : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.ancillaryDataFormatProfile = fieldSetFlags()[2] ? this.ancillaryDataFormatProfile : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.DID = fieldSetFlags()[3] ? this.DID : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.SDID = fieldSetFlags()[4] ? this.SDID : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.lineNumber = fieldSetFlags()[5] ? this.lineNumber : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[5]);
        record.wrappingType = fieldSetFlags()[6] ? this.wrappingType : (java.lang.CharSequence) defaultValue(fields()[6]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
