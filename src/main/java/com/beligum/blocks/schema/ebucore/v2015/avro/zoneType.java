/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.beligum.blocks.schema.ebucore.v2015.avro;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class zoneType extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"zoneType\",\"namespace\":\"com.beligum.blocks.schema.ebucore.v2015.avro\",\"fields\":[{\"name\":\"minX\",\"type\":[\"null\",\"float\"],\"source\":\"attribute minX\"},{\"name\":\"maxX\",\"type\":[\"null\",\"float\"],\"source\":\"attribute maxX\"},{\"name\":\"minY\",\"type\":[\"null\",\"float\"],\"source\":\"attribute minY\"},{\"name\":\"maxY\",\"type\":[\"null\",\"float\"],\"source\":\"attribute maxY\"},{\"name\":\"minZ\",\"type\":[\"null\",\"float\"],\"source\":\"attribute minZ\"},{\"name\":\"maxZ\",\"type\":[\"null\",\"float\"],\"source\":\"attribute maxZ\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.Float minX;
  @Deprecated public java.lang.Float maxX;
  @Deprecated public java.lang.Float minY;
  @Deprecated public java.lang.Float maxY;
  @Deprecated public java.lang.Float minZ;
  @Deprecated public java.lang.Float maxZ;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public zoneType() {}

  /**
   * All-args constructor.
   */
  public zoneType(java.lang.Float minX, java.lang.Float maxX, java.lang.Float minY, java.lang.Float maxY, java.lang.Float minZ, java.lang.Float maxZ) {
    this.minX = minX;
    this.maxX = maxX;
    this.minY = minY;
    this.maxY = maxY;
    this.minZ = minZ;
    this.maxZ = maxZ;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return minX;
    case 1: return maxX;
    case 2: return minY;
    case 3: return maxY;
    case 4: return minZ;
    case 5: return maxZ;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: minX = (java.lang.Float)value$; break;
    case 1: maxX = (java.lang.Float)value$; break;
    case 2: minY = (java.lang.Float)value$; break;
    case 3: maxY = (java.lang.Float)value$; break;
    case 4: minZ = (java.lang.Float)value$; break;
    case 5: maxZ = (java.lang.Float)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'minX' field.
   */
  public java.lang.Float getMinX() {
    return minX;
  }

  /**
   * Sets the value of the 'minX' field.
   * @param value the value to set.
   */
  public void setMinX(java.lang.Float value) {
    this.minX = value;
  }

  /**
   * Gets the value of the 'maxX' field.
   */
  public java.lang.Float getMaxX() {
    return maxX;
  }

  /**
   * Sets the value of the 'maxX' field.
   * @param value the value to set.
   */
  public void setMaxX(java.lang.Float value) {
    this.maxX = value;
  }

  /**
   * Gets the value of the 'minY' field.
   */
  public java.lang.Float getMinY() {
    return minY;
  }

  /**
   * Sets the value of the 'minY' field.
   * @param value the value to set.
   */
  public void setMinY(java.lang.Float value) {
    this.minY = value;
  }

  /**
   * Gets the value of the 'maxY' field.
   */
  public java.lang.Float getMaxY() {
    return maxY;
  }

  /**
   * Sets the value of the 'maxY' field.
   * @param value the value to set.
   */
  public void setMaxY(java.lang.Float value) {
    this.maxY = value;
  }

  /**
   * Gets the value of the 'minZ' field.
   */
  public java.lang.Float getMinZ() {
    return minZ;
  }

  /**
   * Sets the value of the 'minZ' field.
   * @param value the value to set.
   */
  public void setMinZ(java.lang.Float value) {
    this.minZ = value;
  }

  /**
   * Gets the value of the 'maxZ' field.
   */
  public java.lang.Float getMaxZ() {
    return maxZ;
  }

  /**
   * Sets the value of the 'maxZ' field.
   * @param value the value to set.
   */
  public void setMaxZ(java.lang.Float value) {
    this.maxZ = value;
  }

  /** Creates a new zoneType RecordBuilder */
  public static com.beligum.blocks.schema.ebucore.v2015.avro.zoneType.Builder newBuilder() {
    return new com.beligum.blocks.schema.ebucore.v2015.avro.zoneType.Builder();
  }
  
  /** Creates a new zoneType RecordBuilder by copying an existing Builder */
  public static com.beligum.blocks.schema.ebucore.v2015.avro.zoneType.Builder newBuilder(com.beligum.blocks.schema.ebucore.v2015.avro.zoneType.Builder other) {
    return new com.beligum.blocks.schema.ebucore.v2015.avro.zoneType.Builder(other);
  }
  
  /** Creates a new zoneType RecordBuilder by copying an existing zoneType instance */
  public static com.beligum.blocks.schema.ebucore.v2015.avro.zoneType.Builder newBuilder(com.beligum.blocks.schema.ebucore.v2015.avro.zoneType other) {
    return new com.beligum.blocks.schema.ebucore.v2015.avro.zoneType.Builder(other);
  }
  
  /**
   * RecordBuilder for zoneType instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<zoneType>
    implements org.apache.avro.data.RecordBuilder<zoneType> {

    private java.lang.Float minX;
    private java.lang.Float maxX;
    private java.lang.Float minY;
    private java.lang.Float maxY;
    private java.lang.Float minZ;
    private java.lang.Float maxZ;

    /** Creates a new Builder */
    private Builder() {
      super(com.beligum.blocks.schema.ebucore.v2015.avro.zoneType.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.beligum.blocks.schema.ebucore.v2015.avro.zoneType.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.minX)) {
        this.minX = data().deepCopy(fields()[0].schema(), other.minX);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.maxX)) {
        this.maxX = data().deepCopy(fields()[1].schema(), other.maxX);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.minY)) {
        this.minY = data().deepCopy(fields()[2].schema(), other.minY);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.maxY)) {
        this.maxY = data().deepCopy(fields()[3].schema(), other.maxY);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.minZ)) {
        this.minZ = data().deepCopy(fields()[4].schema(), other.minZ);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.maxZ)) {
        this.maxZ = data().deepCopy(fields()[5].schema(), other.maxZ);
        fieldSetFlags()[5] = true;
      }
    }
    
    /** Creates a Builder by copying an existing zoneType instance */
    private Builder(com.beligum.blocks.schema.ebucore.v2015.avro.zoneType other) {
            super(com.beligum.blocks.schema.ebucore.v2015.avro.zoneType.SCHEMA$);
      if (isValidValue(fields()[0], other.minX)) {
        this.minX = data().deepCopy(fields()[0].schema(), other.minX);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.maxX)) {
        this.maxX = data().deepCopy(fields()[1].schema(), other.maxX);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.minY)) {
        this.minY = data().deepCopy(fields()[2].schema(), other.minY);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.maxY)) {
        this.maxY = data().deepCopy(fields()[3].schema(), other.maxY);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.minZ)) {
        this.minZ = data().deepCopy(fields()[4].schema(), other.minZ);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.maxZ)) {
        this.maxZ = data().deepCopy(fields()[5].schema(), other.maxZ);
        fieldSetFlags()[5] = true;
      }
    }

    /** Gets the value of the 'minX' field */
    public java.lang.Float getMinX() {
      return minX;
    }
    
    /** Sets the value of the 'minX' field */
    public com.beligum.blocks.schema.ebucore.v2015.avro.zoneType.Builder setMinX(java.lang.Float value) {
      validate(fields()[0], value);
      this.minX = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'minX' field has been set */
    public boolean hasMinX() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'minX' field */
    public com.beligum.blocks.schema.ebucore.v2015.avro.zoneType.Builder clearMinX() {
      minX = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'maxX' field */
    public java.lang.Float getMaxX() {
      return maxX;
    }
    
    /** Sets the value of the 'maxX' field */
    public com.beligum.blocks.schema.ebucore.v2015.avro.zoneType.Builder setMaxX(java.lang.Float value) {
      validate(fields()[1], value);
      this.maxX = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'maxX' field has been set */
    public boolean hasMaxX() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'maxX' field */
    public com.beligum.blocks.schema.ebucore.v2015.avro.zoneType.Builder clearMaxX() {
      maxX = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'minY' field */
    public java.lang.Float getMinY() {
      return minY;
    }
    
    /** Sets the value of the 'minY' field */
    public com.beligum.blocks.schema.ebucore.v2015.avro.zoneType.Builder setMinY(java.lang.Float value) {
      validate(fields()[2], value);
      this.minY = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'minY' field has been set */
    public boolean hasMinY() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'minY' field */
    public com.beligum.blocks.schema.ebucore.v2015.avro.zoneType.Builder clearMinY() {
      minY = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'maxY' field */
    public java.lang.Float getMaxY() {
      return maxY;
    }
    
    /** Sets the value of the 'maxY' field */
    public com.beligum.blocks.schema.ebucore.v2015.avro.zoneType.Builder setMaxY(java.lang.Float value) {
      validate(fields()[3], value);
      this.maxY = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'maxY' field has been set */
    public boolean hasMaxY() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'maxY' field */
    public com.beligum.blocks.schema.ebucore.v2015.avro.zoneType.Builder clearMaxY() {
      maxY = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'minZ' field */
    public java.lang.Float getMinZ() {
      return minZ;
    }
    
    /** Sets the value of the 'minZ' field */
    public com.beligum.blocks.schema.ebucore.v2015.avro.zoneType.Builder setMinZ(java.lang.Float value) {
      validate(fields()[4], value);
      this.minZ = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'minZ' field has been set */
    public boolean hasMinZ() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'minZ' field */
    public com.beligum.blocks.schema.ebucore.v2015.avro.zoneType.Builder clearMinZ() {
      minZ = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'maxZ' field */
    public java.lang.Float getMaxZ() {
      return maxZ;
    }
    
    /** Sets the value of the 'maxZ' field */
    public com.beligum.blocks.schema.ebucore.v2015.avro.zoneType.Builder setMaxZ(java.lang.Float value) {
      validate(fields()[5], value);
      this.maxZ = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'maxZ' field has been set */
    public boolean hasMaxZ() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'maxZ' field */
    public com.beligum.blocks.schema.ebucore.v2015.avro.zoneType.Builder clearMaxZ() {
      maxZ = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    public zoneType build() {
      try {
        zoneType record = new zoneType();
        record.minX = fieldSetFlags()[0] ? this.minX : (java.lang.Float) defaultValue(fields()[0]);
        record.maxX = fieldSetFlags()[1] ? this.maxX : (java.lang.Float) defaultValue(fields()[1]);
        record.minY = fieldSetFlags()[2] ? this.minY : (java.lang.Float) defaultValue(fields()[2]);
        record.maxY = fieldSetFlags()[3] ? this.maxY : (java.lang.Float) defaultValue(fields()[3]);
        record.minZ = fieldSetFlags()[4] ? this.minZ : (java.lang.Float) defaultValue(fields()[4]);
        record.maxZ = fieldSetFlags()[5] ? this.maxZ : (java.lang.Float) defaultValue(fields()[5]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
