/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.beligum.blocks.schema.ebucore.v2015.avro;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class rationalType extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"rationalType\",\"namespace\":\"com.beligum.blocks.schema.ebucore.v2015.avro\",\"fields\":[{\"name\":\"factorNumerator\",\"type\":[\"null\",\"string\"],\"source\":\"attribute factorNumerator\"},{\"name\":\"factorDenominator\",\"type\":[\"null\",\"string\"],\"source\":\"attribute factorDenominator\"},{\"name\":\"unit\",\"type\":[\"null\",\"string\"],\"source\":\"attribute unit\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence factorNumerator;
  @Deprecated public java.lang.CharSequence factorDenominator;
  @Deprecated public java.lang.CharSequence unit;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public rationalType() {}

  /**
   * All-args constructor.
   */
  public rationalType(java.lang.CharSequence factorNumerator, java.lang.CharSequence factorDenominator, java.lang.CharSequence unit) {
    this.factorNumerator = factorNumerator;
    this.factorDenominator = factorDenominator;
    this.unit = unit;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return factorNumerator;
    case 1: return factorDenominator;
    case 2: return unit;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: factorNumerator = (java.lang.CharSequence)value$; break;
    case 1: factorDenominator = (java.lang.CharSequence)value$; break;
    case 2: unit = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'factorNumerator' field.
   */
  public java.lang.CharSequence getFactorNumerator() {
    return factorNumerator;
  }

  /**
   * Sets the value of the 'factorNumerator' field.
   * @param value the value to set.
   */
  public void setFactorNumerator(java.lang.CharSequence value) {
    this.factorNumerator = value;
  }

  /**
   * Gets the value of the 'factorDenominator' field.
   */
  public java.lang.CharSequence getFactorDenominator() {
    return factorDenominator;
  }

  /**
   * Sets the value of the 'factorDenominator' field.
   * @param value the value to set.
   */
  public void setFactorDenominator(java.lang.CharSequence value) {
    this.factorDenominator = value;
  }

  /**
   * Gets the value of the 'unit' field.
   */
  public java.lang.CharSequence getUnit() {
    return unit;
  }

  /**
   * Sets the value of the 'unit' field.
   * @param value the value to set.
   */
  public void setUnit(java.lang.CharSequence value) {
    this.unit = value;
  }

  /** Creates a new rationalType RecordBuilder */
  public static com.beligum.blocks.schema.ebucore.v2015.avro.rationalType.Builder newBuilder() {
    return new com.beligum.blocks.schema.ebucore.v2015.avro.rationalType.Builder();
  }
  
  /** Creates a new rationalType RecordBuilder by copying an existing Builder */
  public static com.beligum.blocks.schema.ebucore.v2015.avro.rationalType.Builder newBuilder(com.beligum.blocks.schema.ebucore.v2015.avro.rationalType.Builder other) {
    return new com.beligum.blocks.schema.ebucore.v2015.avro.rationalType.Builder(other);
  }
  
  /** Creates a new rationalType RecordBuilder by copying an existing rationalType instance */
  public static com.beligum.blocks.schema.ebucore.v2015.avro.rationalType.Builder newBuilder(com.beligum.blocks.schema.ebucore.v2015.avro.rationalType other) {
    return new com.beligum.blocks.schema.ebucore.v2015.avro.rationalType.Builder(other);
  }
  
  /**
   * RecordBuilder for rationalType instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<rationalType>
    implements org.apache.avro.data.RecordBuilder<rationalType> {

    private java.lang.CharSequence factorNumerator;
    private java.lang.CharSequence factorDenominator;
    private java.lang.CharSequence unit;

    /** Creates a new Builder */
    private Builder() {
      super(com.beligum.blocks.schema.ebucore.v2015.avro.rationalType.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.beligum.blocks.schema.ebucore.v2015.avro.rationalType.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.factorNumerator)) {
        this.factorNumerator = data().deepCopy(fields()[0].schema(), other.factorNumerator);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.factorDenominator)) {
        this.factorDenominator = data().deepCopy(fields()[1].schema(), other.factorDenominator);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.unit)) {
        this.unit = data().deepCopy(fields()[2].schema(), other.unit);
        fieldSetFlags()[2] = true;
      }
    }
    
    /** Creates a Builder by copying an existing rationalType instance */
    private Builder(com.beligum.blocks.schema.ebucore.v2015.avro.rationalType other) {
            super(com.beligum.blocks.schema.ebucore.v2015.avro.rationalType.SCHEMA$);
      if (isValidValue(fields()[0], other.factorNumerator)) {
        this.factorNumerator = data().deepCopy(fields()[0].schema(), other.factorNumerator);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.factorDenominator)) {
        this.factorDenominator = data().deepCopy(fields()[1].schema(), other.factorDenominator);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.unit)) {
        this.unit = data().deepCopy(fields()[2].schema(), other.unit);
        fieldSetFlags()[2] = true;
      }
    }

    /** Gets the value of the 'factorNumerator' field */
    public java.lang.CharSequence getFactorNumerator() {
      return factorNumerator;
    }
    
    /** Sets the value of the 'factorNumerator' field */
    public com.beligum.blocks.schema.ebucore.v2015.avro.rationalType.Builder setFactorNumerator(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.factorNumerator = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'factorNumerator' field has been set */
    public boolean hasFactorNumerator() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'factorNumerator' field */
    public com.beligum.blocks.schema.ebucore.v2015.avro.rationalType.Builder clearFactorNumerator() {
      factorNumerator = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'factorDenominator' field */
    public java.lang.CharSequence getFactorDenominator() {
      return factorDenominator;
    }
    
    /** Sets the value of the 'factorDenominator' field */
    public com.beligum.blocks.schema.ebucore.v2015.avro.rationalType.Builder setFactorDenominator(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.factorDenominator = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'factorDenominator' field has been set */
    public boolean hasFactorDenominator() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'factorDenominator' field */
    public com.beligum.blocks.schema.ebucore.v2015.avro.rationalType.Builder clearFactorDenominator() {
      factorDenominator = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'unit' field */
    public java.lang.CharSequence getUnit() {
      return unit;
    }
    
    /** Sets the value of the 'unit' field */
    public com.beligum.blocks.schema.ebucore.v2015.avro.rationalType.Builder setUnit(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.unit = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'unit' field has been set */
    public boolean hasUnit() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'unit' field */
    public com.beligum.blocks.schema.ebucore.v2015.avro.rationalType.Builder clearUnit() {
      unit = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public rationalType build() {
      try {
        rationalType record = new rationalType();
        record.factorNumerator = fieldSetFlags()[0] ? this.factorNumerator : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.factorDenominator = fieldSetFlags()[1] ? this.factorDenominator : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.unit = fieldSetFlags()[2] ? this.unit : (java.lang.CharSequence) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
