/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.beligum.blocks.schema.ebucore.v2015.avro;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class audioTrackUIDType extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"audioTrackUIDType\",\"namespace\":\"com.beligum.blocks.schema.ebucore.v2015.avro\",\"fields\":[{\"name\":\"UID\",\"type\":[\"null\",\"string\"],\"source\":\"attribute UID\"},{\"name\":\"sampleRate\",\"type\":[\"null\",\"int\"],\"source\":\"attribute sampleRate\"},{\"name\":\"bitDepth\",\"type\":[\"null\",\"int\"],\"source\":\"attribute bitDepth\"},{\"name\":\"audioMXFLookUp\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"audioMXFLookUpType\",\"fields\":[{\"name\":\"packageUIDRef\",\"type\":\"string\",\"source\":\"element packageUIDRef\"},{\"name\":\"trackIDRef\",\"type\":\"string\",\"source\":\"element trackIDRef\"},{\"name\":\"channelIDRef\",\"type\":\"string\",\"source\":\"element channelIDRef\"}]}],\"source\":\"element audioMXFLookUp\"},{\"name\":\"audioTrackFormatIDRef\",\"type\":[\"null\",\"string\"],\"source\":\"element audioTrackFormatIDRef\"},{\"name\":\"audioPackFormatIDRef\",\"type\":[\"null\",\"string\"],\"source\":\"element audioPackFormatIDRef\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence UID;
  @Deprecated public java.lang.Integer sampleRate;
  @Deprecated public java.lang.Integer bitDepth;
  @Deprecated public com.beligum.blocks.schema.ebucore.v2015.avro.audioMXFLookUpType audioMXFLookUp;
  @Deprecated public java.lang.CharSequence audioTrackFormatIDRef;
  @Deprecated public java.lang.CharSequence audioPackFormatIDRef;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public audioTrackUIDType() {}

  /**
   * All-args constructor.
   */
  public audioTrackUIDType(java.lang.CharSequence UID, java.lang.Integer sampleRate, java.lang.Integer bitDepth, com.beligum.blocks.schema.ebucore.v2015.avro.audioMXFLookUpType audioMXFLookUp, java.lang.CharSequence audioTrackFormatIDRef, java.lang.CharSequence audioPackFormatIDRef) {
    this.UID = UID;
    this.sampleRate = sampleRate;
    this.bitDepth = bitDepth;
    this.audioMXFLookUp = audioMXFLookUp;
    this.audioTrackFormatIDRef = audioTrackFormatIDRef;
    this.audioPackFormatIDRef = audioPackFormatIDRef;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return UID;
    case 1: return sampleRate;
    case 2: return bitDepth;
    case 3: return audioMXFLookUp;
    case 4: return audioTrackFormatIDRef;
    case 5: return audioPackFormatIDRef;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: UID = (java.lang.CharSequence)value$; break;
    case 1: sampleRate = (java.lang.Integer)value$; break;
    case 2: bitDepth = (java.lang.Integer)value$; break;
    case 3: audioMXFLookUp = (com.beligum.blocks.schema.ebucore.v2015.avro.audioMXFLookUpType)value$; break;
    case 4: audioTrackFormatIDRef = (java.lang.CharSequence)value$; break;
    case 5: audioPackFormatIDRef = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'UID' field.
   */
  public java.lang.CharSequence getUID() {
    return UID;
  }

  /**
   * Sets the value of the 'UID' field.
   * @param value the value to set.
   */
  public void setUID(java.lang.CharSequence value) {
    this.UID = value;
  }

  /**
   * Gets the value of the 'sampleRate' field.
   */
  public java.lang.Integer getSampleRate() {
    return sampleRate;
  }

  /**
   * Sets the value of the 'sampleRate' field.
   * @param value the value to set.
   */
  public void setSampleRate(java.lang.Integer value) {
    this.sampleRate = value;
  }

  /**
   * Gets the value of the 'bitDepth' field.
   */
  public java.lang.Integer getBitDepth() {
    return bitDepth;
  }

  /**
   * Sets the value of the 'bitDepth' field.
   * @param value the value to set.
   */
  public void setBitDepth(java.lang.Integer value) {
    this.bitDepth = value;
  }

  /**
   * Gets the value of the 'audioMXFLookUp' field.
   */
  public com.beligum.blocks.schema.ebucore.v2015.avro.audioMXFLookUpType getAudioMXFLookUp() {
    return audioMXFLookUp;
  }

  /**
   * Sets the value of the 'audioMXFLookUp' field.
   * @param value the value to set.
   */
  public void setAudioMXFLookUp(com.beligum.blocks.schema.ebucore.v2015.avro.audioMXFLookUpType value) {
    this.audioMXFLookUp = value;
  }

  /**
   * Gets the value of the 'audioTrackFormatIDRef' field.
   */
  public java.lang.CharSequence getAudioTrackFormatIDRef() {
    return audioTrackFormatIDRef;
  }

  /**
   * Sets the value of the 'audioTrackFormatIDRef' field.
   * @param value the value to set.
   */
  public void setAudioTrackFormatIDRef(java.lang.CharSequence value) {
    this.audioTrackFormatIDRef = value;
  }

  /**
   * Gets the value of the 'audioPackFormatIDRef' field.
   */
  public java.lang.CharSequence getAudioPackFormatIDRef() {
    return audioPackFormatIDRef;
  }

  /**
   * Sets the value of the 'audioPackFormatIDRef' field.
   * @param value the value to set.
   */
  public void setAudioPackFormatIDRef(java.lang.CharSequence value) {
    this.audioPackFormatIDRef = value;
  }

  /** Creates a new audioTrackUIDType RecordBuilder */
  public static com.beligum.blocks.schema.ebucore.v2015.avro.audioTrackUIDType.Builder newBuilder() {
    return new com.beligum.blocks.schema.ebucore.v2015.avro.audioTrackUIDType.Builder();
  }
  
  /** Creates a new audioTrackUIDType RecordBuilder by copying an existing Builder */
  public static com.beligum.blocks.schema.ebucore.v2015.avro.audioTrackUIDType.Builder newBuilder(com.beligum.blocks.schema.ebucore.v2015.avro.audioTrackUIDType.Builder other) {
    return new com.beligum.blocks.schema.ebucore.v2015.avro.audioTrackUIDType.Builder(other);
  }
  
  /** Creates a new audioTrackUIDType RecordBuilder by copying an existing audioTrackUIDType instance */
  public static com.beligum.blocks.schema.ebucore.v2015.avro.audioTrackUIDType.Builder newBuilder(com.beligum.blocks.schema.ebucore.v2015.avro.audioTrackUIDType other) {
    return new com.beligum.blocks.schema.ebucore.v2015.avro.audioTrackUIDType.Builder(other);
  }
  
  /**
   * RecordBuilder for audioTrackUIDType instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<audioTrackUIDType>
    implements org.apache.avro.data.RecordBuilder<audioTrackUIDType> {

    private java.lang.CharSequence UID;
    private java.lang.Integer sampleRate;
    private java.lang.Integer bitDepth;
    private com.beligum.blocks.schema.ebucore.v2015.avro.audioMXFLookUpType audioMXFLookUp;
    private java.lang.CharSequence audioTrackFormatIDRef;
    private java.lang.CharSequence audioPackFormatIDRef;

    /** Creates a new Builder */
    private Builder() {
      super(com.beligum.blocks.schema.ebucore.v2015.avro.audioTrackUIDType.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.beligum.blocks.schema.ebucore.v2015.avro.audioTrackUIDType.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.UID)) {
        this.UID = data().deepCopy(fields()[0].schema(), other.UID);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.sampleRate)) {
        this.sampleRate = data().deepCopy(fields()[1].schema(), other.sampleRate);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.bitDepth)) {
        this.bitDepth = data().deepCopy(fields()[2].schema(), other.bitDepth);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.audioMXFLookUp)) {
        this.audioMXFLookUp = data().deepCopy(fields()[3].schema(), other.audioMXFLookUp);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.audioTrackFormatIDRef)) {
        this.audioTrackFormatIDRef = data().deepCopy(fields()[4].schema(), other.audioTrackFormatIDRef);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.audioPackFormatIDRef)) {
        this.audioPackFormatIDRef = data().deepCopy(fields()[5].schema(), other.audioPackFormatIDRef);
        fieldSetFlags()[5] = true;
      }
    }
    
    /** Creates a Builder by copying an existing audioTrackUIDType instance */
    private Builder(com.beligum.blocks.schema.ebucore.v2015.avro.audioTrackUIDType other) {
            super(com.beligum.blocks.schema.ebucore.v2015.avro.audioTrackUIDType.SCHEMA$);
      if (isValidValue(fields()[0], other.UID)) {
        this.UID = data().deepCopy(fields()[0].schema(), other.UID);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.sampleRate)) {
        this.sampleRate = data().deepCopy(fields()[1].schema(), other.sampleRate);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.bitDepth)) {
        this.bitDepth = data().deepCopy(fields()[2].schema(), other.bitDepth);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.audioMXFLookUp)) {
        this.audioMXFLookUp = data().deepCopy(fields()[3].schema(), other.audioMXFLookUp);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.audioTrackFormatIDRef)) {
        this.audioTrackFormatIDRef = data().deepCopy(fields()[4].schema(), other.audioTrackFormatIDRef);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.audioPackFormatIDRef)) {
        this.audioPackFormatIDRef = data().deepCopy(fields()[5].schema(), other.audioPackFormatIDRef);
        fieldSetFlags()[5] = true;
      }
    }

    /** Gets the value of the 'UID' field */
    public java.lang.CharSequence getUID() {
      return UID;
    }
    
    /** Sets the value of the 'UID' field */
    public com.beligum.blocks.schema.ebucore.v2015.avro.audioTrackUIDType.Builder setUID(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.UID = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'UID' field has been set */
    public boolean hasUID() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'UID' field */
    public com.beligum.blocks.schema.ebucore.v2015.avro.audioTrackUIDType.Builder clearUID() {
      UID = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'sampleRate' field */
    public java.lang.Integer getSampleRate() {
      return sampleRate;
    }
    
    /** Sets the value of the 'sampleRate' field */
    public com.beligum.blocks.schema.ebucore.v2015.avro.audioTrackUIDType.Builder setSampleRate(java.lang.Integer value) {
      validate(fields()[1], value);
      this.sampleRate = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'sampleRate' field has been set */
    public boolean hasSampleRate() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'sampleRate' field */
    public com.beligum.blocks.schema.ebucore.v2015.avro.audioTrackUIDType.Builder clearSampleRate() {
      sampleRate = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'bitDepth' field */
    public java.lang.Integer getBitDepth() {
      return bitDepth;
    }
    
    /** Sets the value of the 'bitDepth' field */
    public com.beligum.blocks.schema.ebucore.v2015.avro.audioTrackUIDType.Builder setBitDepth(java.lang.Integer value) {
      validate(fields()[2], value);
      this.bitDepth = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'bitDepth' field has been set */
    public boolean hasBitDepth() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'bitDepth' field */
    public com.beligum.blocks.schema.ebucore.v2015.avro.audioTrackUIDType.Builder clearBitDepth() {
      bitDepth = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'audioMXFLookUp' field */
    public com.beligum.blocks.schema.ebucore.v2015.avro.audioMXFLookUpType getAudioMXFLookUp() {
      return audioMXFLookUp;
    }
    
    /** Sets the value of the 'audioMXFLookUp' field */
    public com.beligum.blocks.schema.ebucore.v2015.avro.audioTrackUIDType.Builder setAudioMXFLookUp(com.beligum.blocks.schema.ebucore.v2015.avro.audioMXFLookUpType value) {
      validate(fields()[3], value);
      this.audioMXFLookUp = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'audioMXFLookUp' field has been set */
    public boolean hasAudioMXFLookUp() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'audioMXFLookUp' field */
    public com.beligum.blocks.schema.ebucore.v2015.avro.audioTrackUIDType.Builder clearAudioMXFLookUp() {
      audioMXFLookUp = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'audioTrackFormatIDRef' field */
    public java.lang.CharSequence getAudioTrackFormatIDRef() {
      return audioTrackFormatIDRef;
    }
    
    /** Sets the value of the 'audioTrackFormatIDRef' field */
    public com.beligum.blocks.schema.ebucore.v2015.avro.audioTrackUIDType.Builder setAudioTrackFormatIDRef(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.audioTrackFormatIDRef = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'audioTrackFormatIDRef' field has been set */
    public boolean hasAudioTrackFormatIDRef() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'audioTrackFormatIDRef' field */
    public com.beligum.blocks.schema.ebucore.v2015.avro.audioTrackUIDType.Builder clearAudioTrackFormatIDRef() {
      audioTrackFormatIDRef = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'audioPackFormatIDRef' field */
    public java.lang.CharSequence getAudioPackFormatIDRef() {
      return audioPackFormatIDRef;
    }
    
    /** Sets the value of the 'audioPackFormatIDRef' field */
    public com.beligum.blocks.schema.ebucore.v2015.avro.audioTrackUIDType.Builder setAudioPackFormatIDRef(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.audioPackFormatIDRef = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'audioPackFormatIDRef' field has been set */
    public boolean hasAudioPackFormatIDRef() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'audioPackFormatIDRef' field */
    public com.beligum.blocks.schema.ebucore.v2015.avro.audioTrackUIDType.Builder clearAudioPackFormatIDRef() {
      audioPackFormatIDRef = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    public audioTrackUIDType build() {
      try {
        audioTrackUIDType record = new audioTrackUIDType();
        record.UID = fieldSetFlags()[0] ? this.UID : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.sampleRate = fieldSetFlags()[1] ? this.sampleRate : (java.lang.Integer) defaultValue(fields()[1]);
        record.bitDepth = fieldSetFlags()[2] ? this.bitDepth : (java.lang.Integer) defaultValue(fields()[2]);
        record.audioMXFLookUp = fieldSetFlags()[3] ? this.audioMXFLookUp : (com.beligum.blocks.schema.ebucore.v2015.avro.audioMXFLookUpType) defaultValue(fields()[3]);
        record.audioTrackFormatIDRef = fieldSetFlags()[4] ? this.audioTrackFormatIDRef : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.audioPackFormatIDRef = fieldSetFlags()[5] ? this.audioPackFormatIDRef : (java.lang.CharSequence) defaultValue(fields()[5]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
